data2$Comparative <- as.factor(data2$Comparative)
# add columns indicating whether A wins along the relevant dimension
data2$numberpx<- c(rep(0, nrow(data2)))
data2$heightpx <- c(rep(0, nrow(data2)))
data2$durationpx <- c(rep(0, nrow(data2)))
for (i in 1:nrow(data2)) {
if (toString(data2$A.Number[i]) > toString(data2$B.Number[i])) {
data2$numberpx[i] <- 1
}
if (toString(data2$A.Height[i]) > toString(data2$B.Height[i])) {
data2$heightpx[i] <- 1
}
if (toString(data2$A.DurationInt[i]) > toString(data2$B.DurationInt[i])) {
data2$durationpx[i] <- 1
}
}
# add columns indicating whether subject's response was correct by that winner
data2$numberYep <- c(rep(0, nrow(data2)))
data2$heightYep <- c(rep(0, nrow(data2)))
data2$durationYep <- c(rep(0, nrow(data2)))
for (i in 1:nrow(data2)) {
if (toString(data2$response[i]) == "f" & data2$numberpx[i] == 1) {
data2$numberYep[i] <- 1
}
if (toString(data2$response[i]) == "j" & data2$numberpx[i] == 0) {
data2$numberYep[i] <- 1
}
if (toString(data2$response[i]) == "f" & data2$heightpx[i] == 1) {
data2$heightYep[i] <- 1
}
if (toString(data2$response[i]) == "j" & data2$heightpx[i] == 0) {
data2$heightYep[i] <- 1
}
if (toString(data2$response[i]) == "f" & data2$durationpx[i]) {
data2$durationYep[i] <- 1
}
if (toString(data2$response[i]) == "j" & data2$durationpx[i] == 0) {
data2$durationYep[i] <- 1
}
}
hyps <- c("number", "duration", "height")
ids <- c("subj", "condition", "Comparative")
library(cldl)
BayesAnalysis(data2, hyps, ics)
BayesAnalysis(data2, hyps, ids)
rearrangeSummarize(kdata, ids, hyps)
BayesPlot(data4.long, ids)
bayes_plot
BayesAnalysis
BayesAnalysis(data2, hyps, ids)
install.packages("ggplot2")
data <- read.csv("~/Desktop/lgs2-labeled.csv")
# add Random column
data$randomYep <- data$value
# read hypotheses into R
hyps <- c("strong", "weak", "average", "X1biggest", "X2biggest", "random")
# read id.vars into R
ids <- c("subject", "mixing", "alignment")
#load cldl package
library(cldl)
# run bayes analysis on the data
BayesAnalysis(data, hyps, ids)
bayes_plot
data <- read.csv("~/Desktop/lgs2-labeled.csv")
# add Random column
data$randomYep <- data$value
View(data)
hyps <- c("strong", "weak", "average", "X1biggest", "X2biggest", "random")
ids <- c("subject", "mixing", "alignment")
#load cldl package
library(cldl)
BayesAnalysis(data, hyps, ids)
bayes_plot
multimerge_vertical_csv("~/Desktop/themostData_6-29-16")
multimerge_vertical_csv("~/Desktop/themostData_6-29-16")
View(data)
data <- read.csv("~/Desktop/lgs2-labeled.csv")
data$randomYep <- data$value
hyps <- c("strong", "weak", "average", "X1biggest", "X2biggest", "random")
ids <- c("subject", "mixing", "alignment")
library(cldl)
BayesAnalysis(data, hyps, ids)
data <- read.csv("~/Desktop/lgs2-labeled.csv")
data$randomYep <- data$value
hyps <- c("strong", "weak", "average", "X1biggest", "X2biggest", "random")
ids <- c("subject", "mixing", "alignment")
library(cldl)
BayesAnalysis(data, hyps, ids)
bayes_plot
data <- read.csv("~/Desktop/lgs2-labeled.csv")
data$randomYep <- data$value
hyps <- c("strong", "weak", "average", "X1biggest", "X2biggest", "random")
ids <- c("subject", "mixing", "alignment")
library(cldl)
BayesAnalysis(data, hyps, ids)
bayes_plot
# NOTE: Comments marked with ### change depending on which version of the experiment is run
# for transforming data for plotting
library(reshape2)
# for clustering
library(mclust)
# for filtering
library(dplyr)
# for plotting
library(ggplot2)
library(gridExtra)
# read data in and eliminate leading whitespace in some of the cells
data <- read.csv('~/Desktop/EVENTSdata.csv', header=TRUE, strip.white=TRUE)
# see which test subjects have to be excluded
unique(data$subj)
attach(data)
### exclude s01-s08 for key assignment problem, s13 for matlab crashing on Events 1, exclude s998 and s999 for all (subject numbers for testing)
data2 <- subset(data,!(subj%in%c("s01","s02","s03","s04","s05","s06","s07","s08","s13","s999","s0999","s20")))
data2 <- subset(data2,!(subj%in%c("s999","s998")))
# exclude reaction times <200ms here
data2 <- subset(data2,!(data2$time<200))
# change all of the Number, Height, Duration to factors
data2$A.Number <- as.factor(data2$A.Number)
data2$B.Number <- as.factor(data2$B.Number)
data2$A.Height <- as.factor(data2$A.Height)
data2$B.Height <- as.factor(data2$B.Height)
data2$A.Jump.Duration <- as.factor(data2$A.Jump.Duration)
data2$B.Jump.Duration <- as.factor(data2$B.Jump.Duration)
data2$A.Total.Duration <- as.factor(data2$A.Total.Duration)
data2$B.Total.Duration <- as.factor(data2$B.Total.Duration)
# add columns A.DurationInt and B.DurationInt to represent duration with interjump time
### for Events 1, use following:
data2$A.DurationInt = ifelse(data2$A.Total.Duration==3.55,4,
ifelse(data2$A.Total.Duration==3.85,4,
ifelse(data2$A.Total.Duration==5.7,6,
ifelse(data2$A.Total.Duration==5.85,6,
ifelse(data2$A.Total.Duration==1.7,2,
ifelse(data2$A.Total.Duration==1.55,2,"error"))))))
data2$B.DurationInt = ifelse(data2$B.Total.Duration==3.55,4,
ifelse(data2$B.Total.Duration==3.85,4,
ifelse(data2$B.Total.Duration==5.7,6,
ifelse(data2$B.Total.Duration==5.85,6,
ifelse(data2$B.Total.Duration==1.7,2,
ifelse(data2$B.Total.Duration==1.55,2,"error"))))))
###
#### for Events 1v2 and 2v2, use following instead:
#data2$A.DurationInt = ifelse(data2$A.Total.Duration==3.55,4,
#                            ifelse(data2$A.Total.Duration==3.7,4,
#                                  ifelse(data2$A.Total.Duration==5.55,6,
#                                        ifelse(data2$A.Total.Duration==5.85,6,
#                                              ifelse(data2$A.Total.Duration==7.7,8,
#                                                    ifelse(data2$A.Total.Duration==7.85,8,"error"))))))
#data2$B.DurationInt = ifelse(data2$B.Total.Duration==3.55,4,
#                            ifelse(data2$B.Total.Duration==3.7,4,
#                                  ifelse(data2$B.Total.Duration==5.55,6,
#                                        ifelse(data2$B.Total.Duration==5.85,6,
#                                              ifelse(data2$B.Total.Duration==7.7,8,
#                                                    ifelse(data2$B.Total.Duration==7.85,8,"error"))))))
###
# change DurationInt  to factors
data2$A.DurationInt <- as.factor(data2$A.DurationInt)
data2$B.DurationInt <- as.factor(data2$B.DurationInt)
# add Comparative column (HIGHER, LONGER, MORE, MORE TIMES)
####for events 1 and 1v2, use this:
data2$Comparative <- ifelse(data2$sentence=="Did the star jump HIGHER than the heart?","HIGHER",
ifelse(data2$sentence=="Did the star jump LONGER than the heart?","LONGER",
ifelse(data2$sentence=="Did the star jump MORE than the heart?","MORE",
ifelse(data2$sentence=="Did the star jump MORE TIMES than the heart?","MORETIMES","error"))))
###
###for events 2v2, use this:
#data2$Comparative <- ifelse(data2$sentence=="Did the star move HIGHER than the heart?","HIGHER",
#                           ifelse(data2$sentence=="Did the star move LONGER than the heart?","LONGER",
#                                 ifelse(data2$sentence=="Did the star move MORE than the heart?","MORE",
#                                       ifelse(data2$sentence=="Did the star move MORE TIMES than the heart?","MORETIMES","error"))))
###
#change Comparative to factors
data2$Comparative <- as.factor(data2$Comparative)
#rename "subj" to "subject"
colnames(data2)[colnames(data2)=="subj"] = "subject"
# add columns indicating whether A wins along the relevant dimension
data2$numberpx<- c(rep(0, nrow(data2)))
data2$heightpx <- c(rep(0, nrow(data2)))
data2$durationpx <- c(rep(0, nrow(data2)))
for (i in 1:nrow(data2)) {
if (toString(data2$A.Number[i]) > toString(data2$B.Number[i])) {
data2$numberpx[i] <- 1
}
if (toString(data2$A.Height[i]) > toString(data2$B.Height[i])) {
data2$heightpx[i] <- 1
}
if (toString(data2$A.DurationInt[i]) > toString(data2$B.DurationInt[i])) {
data2$durationpx[i] <- 1
}
}
# add columns indicating whether subject's response was correct by that winner
data2$numberYep <- c(rep(0, nrow(data2)))
data2$heightYep <- c(rep(0, nrow(data2)))
data2$durationYep <- c(rep(0, nrow(data2)))
for (i in 1:nrow(data2)) {
if (toString(data2$response[i]) == "f" & data2$numberpx[i] == 1) {
data2$numberYep[i] <- 1
}
if (toString(data2$response[i]) == "j" & data2$numberpx[i] == 0) {
data2$numberYep[i] <- 1
}
if (toString(data2$response[i]) == "f" & data2$heightpx[i] == 1) {
data2$heightYep[i] <- 1
}
if (toString(data2$response[i]) == "j" & data2$heightpx[i] == 0) {
data2$heightYep[i] <- 1
}
if (toString(data2$response[i]) == "f" & data2$durationpx[i]) {
data2$durationYep[i] <- 1
}
if (toString(data2$response[i]) == "j" & data2$durationpx[i] == 0) {
data2$durationYep[i] <- 1
}
}
# add column "random" for likelihood of null
data2$likelihoodRandom <- (1/2)^30
# Bayes Analysis
ids <- c("subject", "condition", "Comparative", "random")
hyps <- c("height", "duration", "number")
BayesAnalysis(data2, hyps, ids)
library(cldl)
BayesAnalysis(data2, hyps, ids)
data2$likelihoodRandom <- (1/2)^30
ids <- c("subject", "condition", "Comparative", "Random")
hyps <- c("height", "duration", "number")
library(cldl)
BayesAnalysis(data2, hyps, ids)
View(data2)
ids <- c("subject", "condition", "Comparative")
hyps <- c("height", "duration", "number")
library(cldl)
BayesAnalysis(data2, hyps, ids)
bayes_plot
makeNopes_fromYeps(data2, hyps)
allLikelihoods_yepFormat(nopedata, ids, c(hyps,"Random"))
allKValues(ldata, c(hyps, "Random"))
ldata$likelihoodRandom <- (1/2)^30
allKValues(ldata, c(hyps, "Random"))
View(ldata)
rearrangeSummarize(kdata, ids, c(hyps, "Random"))
BayesPlot(data4.long,ids)
bayes_plot
library(lme4)
install.packages("lme4")
data <- read.csv("~/Desktop/gleebest2-data-reshaped.csv")
data <- na.omit(data)
library(lme4)
View(data)
data <- read.csv("~/Desktop/gleebest2-data-reshaped.csv")
data <- na.omit(data)
nrow(data)
View(data)
data <- read.csv("~/Desktop/lgs2n_mturk_completedata.csv")
View(data)
data <- read.csv("~/Desktop/lgs2n_mturk_completedata.csv")
data <- read.csv("~/Desktop/lgs2n_complete")
data <- read.csv("~/Desktop/lgs2n_complete.csv")
setwd("~/git/cldl_repos/cldl")
setwd("~/git/cldl_repos")
install('cldl')
library(Devtools)
library(devtools)
install("cldl")
setwd("./cldl")
setwd("theRpackages")
install('cldl')
cldl::merge_and_split("~/Desktop/lgs4-5")
merge_and_split()
merge_and_split
cldl::merge_and_split()
cldl::merge_and_split
cldl::merge_and_split(~/Desktop/lgs4-5)
cldl::merge_and_split('~/Desktop/lgs4-5')
cldl::merge_and_split('~/Desktop/lgs4-5')
cldl::merge_and_split('~/Desktop/lgs4-5')
cldl::merge_and_split('~/Desktop/lgs4-5')
cldl::merge_and_split('~/Desktop/lgs4-5')
cldl::merge_and_split('~/Desktop/lgs4-5')
cldl::merge_and_split('~/Desktop/lgs4-5')
cldl::merge_and_split('~/Desktop/lgs4-5')
cldl::merge_and_split('~/Desktop/lgs4-5')
cldl::merge_and_split('~/Desktop/lgs4-5')
cldl::merge_and_split('~/Desktop/lgs8-9')
library(jsonlite)
b <- surveyData[1,]$responses
c <- as.character(b) # didn't work without the as.character conversion! aha!
d <- as.data.frame(jsonlite::fromJSON(c))
View(d)
a <- surveyData[2,]$responses
a <- as.character(a)
a <- as.data.frame(jsonlite::fromJSON(a))
View(a)
e <- rbind.data.frame(a,d)
View(e)
for(i in 1:nrow(surveyData)) {
cell <- surveyData[i,]$responses
cell <- as.character(cell)
cell <- as.data.frame(jsonlite::fromJSON(cell))
rbind.data.frame(cell, e)
}
View(e)
emptydf <- data.frame()
getjson <- function(i, df, colname) {
newdf <- df[i,colname]
newdf <- as.character(newdf)
newdf <- as.data.frame(jsonlite::fromJSON(newdf))
emptydf <<- rbind.data.frame(emptydf, newdf)
}
getjson(2,surveyData,"responses") # this works for doing 1 cell!
View(emptydf)
lapply(1:nrow(surveyData), function(x) getjson(x, surveyData, "responses")) # this worked for doing every row! is there a better way?
View(emptydf)
Reduce(getjson(x, surveyData, "responses"), 1:nrow(surveyData))
q <-1:nrow(surveyData)
q
Reduce(getjson(x, surveyData, "responses"),i in 1:nrow(surveyData))
parsedSurveyData <- data.frame() # empty data frame to start with
getjson <- function(i, df, colname) {
newdf <- df[i,colname]
newdf <- as.character(newdf)
newdf <- as.data.frame(jsonlite::fromJSON(newdf))
emptydf <<- rbind.data.frame(emptydf, newdf)
}
lapply(1:nrow(surveyData), function(x) getjson(x, surveyData, "responses")) # this worked for doing every row! is there a better way?
parsedSurveyData <- data.frame() # empty data frame to start with
getjson <- function(i, df, colname) {
newdf <- df[i,colname]
newdf <- as.character(newdf)
newdf <- as.data.frame(jsonlite::fromJSON(newdf))
emptydf <<- rbind.data.frame(parsedSurveyData, newdf)
}
lapply(1:nrow(surveyData), function(x) getjson(x, surveyData, "responses")) # this worked for doing every row! is there a better way?
View(parsedSurveyData)
rm(emptydf)
rm(parsedSurveyData)
rm(b,c,i,q)
mydf <- Reduce(getjson(x,surveyData,"responses"), 1:nrows(surveyData))
mydf <- Reduce(getjson(x,surveyData,"responses"), 1:nrow(surveyData))
mydf <- Reduce(function(x) getjson(x,surveyData,"responses"), 1:nrow(surveyData))
Reduce(function(x,y) {rbind(getjson(x)),y)}, datalist)
Reduce(function(x) {rbind(getjson(x))}, datalist)
lapply(1:nrow(surveyData), function(x) getjson(x, surveyData, "responses")) # this worked for doing every row! is there a better way?
emptydf <- data.frame()
getjson <- function(i, df, colname) {
newdf <- df[i,colname]
newdf <- as.character(newdf)
newdf <- as.data.frame(jsonlite::fromJSON(newdf))
emptydf <<- rbind.data.frame(emptydf, newdf)
}
lapply(1:nrow(surveyData), function(x) getjson(x, surveyData, "responses")) # this worked for doing every row! is there a better way?
View(emptydf)
parsedSurvey <- data.frame()
getjson <- function(i, df, colname) {
newdf <- df[i,colname]
newdf <- as.character(newdf)
newdf <- as.data.frame(jsonlite::fromJSON(newdf))
emptydf <<- rbind.data.frame(parsedSurvey, newdf)
}
lapply(1:nrow(surveyData), function(x) getjson(x, surveyData, "responses")) # this worked for doing every row! is there a better way?
# let's try to abstract a bit
parsedSurvey <- data.frame()
getjson <- function(i, df, colname) {
newdf <- df[i,colname]
newdf <- as.character(newdf)
newdf <- as.data.frame(jsonlite::fromJSON(newdf))
parsedSurvey <<- rbind.data.frame(parsedSurvey, newdf)
}
lapply(1:nrow(surveyData), function(x) getjson(x, surveyData, "responses")) # this worked for doing every row! is there a better way?
rm(a,cell,d,e)
rm(emptydf)
rm(parsedSurvey)
parsedSurvey <- data.frame()
getjson <- function(i, df, colname) {
newdf <- df[i,colname]
newdf <- as.character(newdf)
newdf <- as.data.frame(jsonlite::fromJSON(newdf))
parsedSurvey <<- rbind.data.frame(parsedSurvey, newdf)
}
lapply(1:nrow(surveyData), function(x) getjson(x, surveyData, "responses")) # this worked for doing every row! is there a better way?
View(parsedSurvey)
parseJson_surveyData <- function(df,json_colname) {
parsedSurvey <- data.frame() # empty dataframe to append rows to
getjson <- function(i, df, colname) {
newrow <- df[i,colname]
newrow <- as.character(newrow)
newdf <- as.data.frame(jsonlite::fromJSON(newrow))
parsedSurvey <<- rbind.data.frame(parsedSurvey, newdf)
}
lapply(1:nrow(df), function(x) getjson(x, df, colname))
}
parseJson_surveyData <- function(df,json_colname) {
parsedSurvey <- data.frame() # empty dataframe to append rows to
getjson <- function(i, df, colname) {
newrow <- df[i,colname]
newrow <- as.character(newrow)
newdf <- as.data.frame(jsonlite::fromJSON(newrow))
parsedSurvey <<- rbind.data.frame(parsedSurvey, newdf)
}
lapply(1:nrow(df), function(x) getjson(x, df, colname))
assign(parsedSurvey, "parsedSurvey", .GlobalEnv)
}
parse_json_survey_data(surveyData, "responses")
parse_json_survey_data <- function(df,json_colname) {
parsedSurvey <- data.frame() # empty dataframe to append rows to
getjson <- function(i, df, colname) {
newrow <- df[i,colname]
newrow <- as.character(newrow)
newdf <- as.data.frame(jsonlite::fromJSON(newrow))
parsedSurvey <<- rbind.data.frame(parsedSurvey, newdf)
}
lapply(1:nrow(df), function(x) getjson(x, df, colname))
assign(parsedSurvey, "parsedSurvey", .GlobalEnv)
}
parse_json_survey_data(surveyData, "responses")
rm(parsedSurvey)
parse_json_survey_data <- function(df,json_colname) {
parsedSurvey <- data.frame() # empty dataframe to append rows to
getjson <- function(i, df, colname) {
newrow <- df[i,colname]
newrow <- as.character(newrow)
newdf <- as.data.frame(jsonlite::fromJSON(newrow))
parsedSurvey <<- rbind.data.frame(parsedSurvey, newdf)
}
lapply(1:nrow(df), function(x) getjson(x, df, json_colname))
assign(parsedSurvey, "parsedSurvey", .GlobalEnv)
}
parse_json_survey_data(surveyData, "responses")
parse_json_survey_data <- function(df,json_colname) {
parsedSurvey <- data.frame() # empty dataframe to append rows to
getjson <- function(i, df, colname) {
newrow <- df[i,colname]
newrow <- as.character(newrow)
newdf <- as.data.frame(jsonlite::fromJSON(newrow))
parsedSurvey <<- rbind.data.frame(parsedSurvey, newdf)
}
lapply(1:nrow(df), function(x) getjson(x, df, json_colname))
assign("parsedSurvey", parsedSurvey, .GlobalEnv)
}
parse_json_survey_data(surveyData, "responses")
View(parsedSurvey)
View(surveyData)
parse_json_survey_data <- function(df,json_colname) {
parsedSurvey <- data.frame() # empty dataframe to append rows to
getjson <- function(i, df, colname) {
newrow <- df[i,colname]
newrow <- as.character(newrow)
newdf <- as.data.frame(jsonlite::fromJSON(newrow))
df <<- cbind(df, newdf)
# parsedSurvey <<- rbind.data.frame(parsedSurvey, newdf)
}
lapply(1:nrow(df), function(x) getjson(x, df, json_colname))
# assign("parsedSurvey", parsedSurvey, .GlobalEnv)
# Add these back to the original dataframe!!!!
}
parse_json_survey_data(surveyData, "responses")
View(surveyData)
View(parsedSurvey)
df <- rbind(surveyData, parsedSurvey)
df <- cbind(surveyData, parsedSurvey)
View(df)
parse_json_survey_data <- function(df,json_colname) {
parsedSurvey <- data.frame() # empty dataframe to append rows to
getjson <- function(i, df, colname) {
newrow <- df[i,colname]
newrow <- as.character(newrow)
newdf <- as.data.frame(jsonlite::fromJSON(newrow))
parsedSurvey <- rbind.data.frame(parsedSurvey, newdf)
}
lapply(1:nrow(df), function(x) getjson(x, df, json_colname))
assign("parsedSurvey", parsedSurvey, .GlobalEnv)
# Add these back to the original dataframe!!!!
}
parse_json_survey_data(surveyData, "responses")
parse_json_survey_data <- function(df,json_colname) {
parsedSurvey <- data.frame() # empty dataframe to append rows to
getjson <- function(i, df, colname) {
newrow <- df[i,colname]
newrow <- as.character(newrow)
newdf <- as.data.frame(jsonlite::fromJSON(newrow))
parsedSurvey <<- rbind.data.frame(parsedSurvey, newdf)
}
lapply(1:nrow(df), function(x) getjson(x, df, json_colname))
assign("parsedSurvey", parsedSurvey, .GlobalEnv)
# Add these back to the original dataframe!!!!
}
parse_json_survey_data(surveyData, "responses")
rm(parsedSurvey, df)
parse_json_survey_data <- function(df,json_colname) {
parsedSurvey <- data.frame() # empty dataframe to append rows to
getjson <- function(i, df, colname) {
newrow <- df[i,colname]
newrow <- as.character(newrow)
newdf <- as.data.frame(jsonlite::fromJSON(newrow))
parsedSurvey <<- rbind.data.frame(parsedSurvey, newdf)  # has to be globally assigned for this
}
lapply(1:nrow(df), function(x) getjson(x, df, json_colname))
# Add these back to the original dataframe!!!!
parsedSurveyData <<- cbind(df, parsedSurvey)
}
parse_json_survey_data(surveyData, "responses")
View(parsedSurveyData)
rm(parsedSurveyData)
parse_json_survey_data(surveyData, "responses")
View(parsedSurveyData)
library(devtools)
getwd()
setwd("~/git/cldl_repos_theRpackages/cldl")
setwd("~/git/cldl_repos/theRpackages/cldl")
document()
setwd("..")
install("cldl")
View(surveyData)
View(parsedSurveyData)
