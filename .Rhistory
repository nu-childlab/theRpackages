data2$A.Height <- as.factor(data2$A.Height)
data2$B.Height <- as.factor(data2$B.Height)
data2$A.Jump.Duration <- as.factor(data2$A.Jump.Duration)
data2$B.Jump.Duration <- as.factor(data2$B.Jump.Duration)
data2$A.Total.Duration <- as.factor(data2$A.Total.Duration)
data2$B.Total.Duration <- as.factor(data2$B.Total.Duration)
# add columns A.DurationInt and B.DurationInt to represent duration with interjump time
### for Events 1, use following:
data2$A.DurationInt = ifelse(data2$A.Total.Duration==3.55,4,
ifelse(data2$A.Total.Duration==3.85,4,
ifelse(data2$A.Total.Duration==5.7,6,
ifelse(data2$A.Total.Duration==5.85,6,
ifelse(data2$A.Total.Duration==1.7,2,
ifelse(data2$A.Total.Duration==1.55,2,"error"))))))
data2$B.DurationInt = ifelse(data2$B.Total.Duration==3.55,4,
ifelse(data2$B.Total.Duration==3.85,4,
ifelse(data2$B.Total.Duration==5.7,6,
ifelse(data2$B.Total.Duration==5.85,6,
ifelse(data2$B.Total.Duration==1.7,2,
ifelse(data2$B.Total.Duration==1.55,2,"error"))))))
###
#### for Events 1v2 and 2v2, use following instead:
#data2$A.DurationInt = ifelse(data2$A.Total.Duration==3.55,4,
#                            ifelse(data2$A.Total.Duration==3.7,4,
#                                  ifelse(data2$A.Total.Duration==5.55,6,
#                                        ifelse(data2$A.Total.Duration==5.85,6,
#                                              ifelse(data2$A.Total.Duration==7.7,8,
#                                                    ifelse(data2$A.Total.Duration==7.85,8,"error"))))))
#data2$B.DurationInt = ifelse(data2$B.Total.Duration==3.55,4,
#                            ifelse(data2$B.Total.Duration==3.7,4,
#                                  ifelse(data2$B.Total.Duration==5.55,6,
#                                        ifelse(data2$B.Total.Duration==5.85,6,
#                                              ifelse(data2$B.Total.Duration==7.7,8,
#                                                    ifelse(data2$B.Total.Duration==7.85,8,"error"))))))
###
# change DurationInt  to factors
data2$A.DurationInt <- as.factor(data2$A.DurationInt)
data2$B.DurationInt <- as.factor(data2$B.DurationInt)
# add Comparative column (HIGHER, LONGER, MORE, MORE TIMES)
####for events 1 and 1v2, use this:
data2$Comparative <- ifelse(data2$sentence=="Did the star jump HIGHER than the heart?","HIGHER",
ifelse(data2$sentence=="Did the star jump LONGER than the heart?","LONGER",
ifelse(data2$sentence=="Did the star jump MORE than the heart?","MORE",
ifelse(data2$sentence=="Did the star jump MORE TIMES than the heart?","MORETIMES","error"))))
###
data2$Comparative <- as.factor(data2$Comparative)
View(data)
View(data2)
# add columns indicating whether A wins along the relevant dimension
data2$numberpx<- c(rep(0, nrow(data2)))
data2$heightpx <- c(rep(0, nrow(data2)))
data2$durationpx <- c(rep(0, nrow(data2)))
for (i in 1:nrow(data2)) {
if (toString(data2$A.Number[i]) > toString(data2$B.Number[i])) {
data2$numberpx[i] <- 1
}
if (toString(data2$A.Height[i]) > toString(data2$B.Height[i])) {
data2$heightpx[i] <- 1
}
if (toString(data2$A.DurationInt[i]) > toString(data2$B.DurationInt[i])) {
data2$durationpx[i] <- 1
}
}
View(data2)
# add columns indicating whether subject's response was correct by that winner
data2$numberYep <- c(rep(0, nrow(data2)))
data2$heightYep <- c(rep(0, nrow(data2)))
data2$durationYep <- c(rep(0, nrow(data2)))
# add columns indicating whether subject's response was correct by that winner
data2$numberYep <- c(rep(0, nrow(data2)))
data2$heightYep <- c(rep(0, nrow(data2)))
data2$durationYep <- c(rep(0, nrow(data2)))
for (i in 1:nrow(data2)) {
if (toString(data2$response[i]) == "f" & data2$numberpx[i] == 1) {
data2$numberYep[i] <- 1
}
if (toString(data2$response[i]) == "j" & data2$numberpx[i] == 0) {
data2$numberYep[i] <- 1
}
if (toString(data2$response[i]) == "f" & data2$heightpx[i] == 1) {
data2$heightYep[i] <- 1
}
if (toString(data2$response[i]) == "j" & data2$heightpx[i] == 0) {
data2$heightYep[i] <- 1
}
if (toString(data2$response[i]) == "f" & data2$durationpx[i]) {
data2$durationYep[i] <- 1
}
if (toString(data2$response[i]) == "j" & data2$durationpx[i] == 0) {
data2$durationYep[i] <- 1
}
}
View(data2)
hyps <- c("height", "number", "duration")
ids <- c("subject", "condition", "Comparative")
BayesAnalysis(data2, hyps, ids)
ids <- c("subj", "condition", "Comparative")
BayesAnalysis(data2, hyps, ids)
View(kdata)
rearrangeSummarize(kdata, ids, hyps)
rearrangeSummarize <- function(df, list_id_vars, list_of_hypotheses) {
# pull only the columns we are interested in into a new dataframe so it's not so crazy to look at and graph
hypcolnames <- sapply(list_of_hypotheses, function(x) paste(x,"Hyp",sep=""))
subsetcols <- c(list_id_vars, hypcolnames)
data3 <- df[,unlist(subsetcols)]
#create column combining id_vars besides subject into "block"
subject_id_var <- "subj"
rest_id_vars <- unlist(lapply(list_id_vars, function(x) if(!(x %in% subject_id_var)) x))
attach(data3)
block <- Reduce(function(x,y) paste(get(x),get(y),sep="_"), rest_id_vars)
block <- as.factor(block)
data3 <- cbind(data3, block)
# add winner column, print which hypothesis wins for each subject
# step 1: get row numbers corresponding to each hyp's 'winners'
hyprownumbers <- lapply(hypcolnames, function(x) which(data3[x] == 1))
indices <- c(1:length(hyprownumbers))
# step 2, update winner col with hypothesis winner based on row numbers
# for some reason this doesn't work with an lapply but works with a for loop :(
for(i in 1:length(hyprownumbers)) {
#if a non-zero vector:
if(length(unlist(hyprownumbers[i]))!=0) {
data3[unlist(hyprownumbers[i]), "Winner"] <- labels(hyprownumbers[i])
}
}
data3$Winner <- as.factor(data3$Winner)
assign("data3", data3, .GlobalEnv)
# sum hypothesis responses
# so it collapses *across subjects* for each combo of idvars (instead of listing each subject for each combo)
data4 <<- plyr::ddply(data3, "block", plyr::numcolwise(sum))
# melt data (wide format to long format) so its easier to graph Bayes for mixing/alignments
data4.long <<- reshape2::melt(data4)
detach()
}
rearrangeSummarize(data2, ids, hyps)
levels <- read.csv("~/Desktop/lgs2-levels-formerging.csv")
names(levels)[names(levels)=="X1biggest"] <- "X1biggestpx"
names(levels)[names(levels)=="X2biggest"] <- "X2biggestpx"
data <- read.csv("~/Desktop/lgs2_data.csv")
hyps <- c("strong", "weak", "average", "X1biggest", "X2biggest", "random")
ids <- c("subject", "mixing", "alignment")
BayesAnalysis(data, hyps, ids, levels = levels)
bayes_plot
View(ldata)
View(kdata)
rearrangeSummarize <- function(df, list_id_vars, list_of_hypotheses) {
# pull only the columns we are interested in into a new dataframe so it's not so crazy to look at and graph
hypcolnames <- sapply(list_of_hypotheses, function(x) paste(x,"Hyp",sep=""))
subsetcols <- c(list_id_vars, hypcolnames)
data3 <- df[,unlist(subsetcols)]
#create column combining id_vars besides subject into "block"
subject_id_var <- "subj"
rest_id_vars <- unlist(lapply(list_id_vars, function(x) if(!(x %in% subject_id_var)) x))
attach(data3)
block <- Reduce(function(x,y) paste(get(x),get(y),sep="_"), rest_id_vars)
block <- as.factor(block)
data3 <- cbind(data3, block)
# add winner column, print which hypothesis wins for each subject
# step 1: get row numbers corresponding to each hyp's 'winners'
hyprownumbers <- lapply(hypcolnames, function(x) which(data3[x] == 1))
indices <- c(1:length(hyprownumbers))
# step 2, update winner col with hypothesis winner based on row numbers
# for some reason this doesn't work with an lapply but works with a for loop :(
for(i in 1:length(hyprownumbers)) {
#if a non-zero vector:
if(length(unlist(hyprownumbers[i]))!=0) {
data3[unlist(hyprownumbers[i]), "Winner"] <- labels(hyprownumbers[i])
}
}
data3$Winner <- as.factor(data3$Winner)
assign("data3", data3, .GlobalEnv)
# sum hypothesis responses
# so it collapses *across subjects* for each combo of idvars (instead of listing each subject for each combo)
data4 <<- plyr::ddply(data3, "block", plyr::numcolwise(sum))
# melt data (wide format to long format) so its easier to graph Bayes for mixing/alignments
data4.long <<- reshape2::melt(data4)
detach()
}
# read data in and eliminate leading whitespace in some of the cells
data <- read.csv('~/Desktop/EVENTSdata.csv', header=TRUE, strip.white=TRUE)
# see which test subjects have to be excluded
unique(data$subj)
attach(data)
### exclude s01-s08 for key assignment problem, s13 for matlab crashing on Events 1, exclude s998 and s999 for all (subject numbers for testing)
data2 <- subset(data,!(subj%in%c("s01","s02","s03","s04","s05","s06","s07","s08","s13","s999","s0999","s20")))
data2 <- subset(data2,!(subj%in%c("s999","s998")))
# exclude reaction times <200ms here
data2 <- subset(data2,!(data2$time<200))
# change all of the Number, Height, Duration to factors
data2$A.Number <- as.factor(data2$A.Number)
data2$B.Number <- as.factor(data2$B.Number)
data2$A.Height <- as.factor(data2$A.Height)
data2$B.Height <- as.factor(data2$B.Height)
data2$A.Jump.Duration <- as.factor(data2$A.Jump.Duration)
data2$B.Jump.Duration <- as.factor(data2$B.Jump.Duration)
data2$A.Total.Duration <- as.factor(data2$A.Total.Duration)
data2$B.Total.Duration <- as.factor(data2$B.Total.Duration)
# add columns A.DurationInt and B.DurationInt to represent duration with interjump time
### for Events 1, use following:
data2$A.DurationInt = ifelse(data2$A.Total.Duration==3.55,4,
ifelse(data2$A.Total.Duration==3.85,4,
ifelse(data2$A.Total.Duration==5.7,6,
ifelse(data2$A.Total.Duration==5.85,6,
ifelse(data2$A.Total.Duration==1.7,2,
ifelse(data2$A.Total.Duration==1.55,2,"error"))))))
data2$B.DurationInt = ifelse(data2$B.Total.Duration==3.55,4,
ifelse(data2$B.Total.Duration==3.85,4,
ifelse(data2$B.Total.Duration==5.7,6,
ifelse(data2$B.Total.Duration==5.85,6,
ifelse(data2$B.Total.Duration==1.7,2,
ifelse(data2$B.Total.Duration==1.55,2,"error"))))))
###
#### for Events 1v2 and 2v2, use following instead:
#data2$A.DurationInt = ifelse(data2$A.Total.Duration==3.55,4,
#                            ifelse(data2$A.Total.Duration==3.7,4,
#                                  ifelse(data2$A.Total.Duration==5.55,6,
#                                        ifelse(data2$A.Total.Duration==5.85,6,
#                                              ifelse(data2$A.Total.Duration==7.7,8,
#                                                    ifelse(data2$A.Total.Duration==7.85,8,"error"))))))
#data2$B.DurationInt = ifelse(data2$B.Total.Duration==3.55,4,
#                            ifelse(data2$B.Total.Duration==3.7,4,
#                                  ifelse(data2$B.Total.Duration==5.55,6,
#                                        ifelse(data2$B.Total.Duration==5.85,6,
#                                              ifelse(data2$B.Total.Duration==7.7,8,
#                                                    ifelse(data2$B.Total.Duration==7.85,8,"error"))))))
###
# change DurationInt  to factors
data2$A.DurationInt <- as.factor(data2$A.DurationInt)
data2$B.DurationInt <- as.factor(data2$B.DurationInt)
# add Comparative column (HIGHER, LONGER, MORE, MORE TIMES)
####for events 1 and 1v2, use this:
data2$Comparative <- ifelse(data2$sentence=="Did the star jump HIGHER than the heart?","HIGHER",
ifelse(data2$sentence=="Did the star jump LONGER than the heart?","LONGER",
ifelse(data2$sentence=="Did the star jump MORE than the heart?","MORE",
ifelse(data2$sentence=="Did the star jump MORE TIMES than the heart?","MORETIMES","error"))))
###
###for events 2v2, use this:
#data2$Comparative <- ifelse(data2$sentence=="Did the star move HIGHER than the heart?","HIGHER",
#                           ifelse(data2$sentence=="Did the star move LONGER than the heart?","LONGER",
#                                 ifelse(data2$sentence=="Did the star move MORE than the heart?","MORE",
#                                       ifelse(data2$sentence=="Did the star move MORE TIMES than the heart?","MORETIMES","error"))))
###
#change Comparative to factors
data2$Comparative <- as.factor(data2$Comparative)
# add columns indicating whether A wins along the relevant dimension
data2$numberpx<- c(rep(0, nrow(data2)))
data2$heightpx <- c(rep(0, nrow(data2)))
data2$durationpx <- c(rep(0, nrow(data2)))
for (i in 1:nrow(data2)) {
if (toString(data2$A.Number[i]) > toString(data2$B.Number[i])) {
data2$numberpx[i] <- 1
}
if (toString(data2$A.Height[i]) > toString(data2$B.Height[i])) {
data2$heightpx[i] <- 1
}
if (toString(data2$A.DurationInt[i]) > toString(data2$B.DurationInt[i])) {
data2$durationpx[i] <- 1
}
}
# add columns indicating whether subject's response was correct by that winner
data2$numberYep <- c(rep(0, nrow(data2)))
data2$heightYep <- c(rep(0, nrow(data2)))
data2$durationYep <- c(rep(0, nrow(data2)))
for (i in 1:nrow(data2)) {
if (toString(data2$response[i]) == "f" & data2$numberpx[i] == 1) {
data2$numberYep[i] <- 1
}
if (toString(data2$response[i]) == "j" & data2$numberpx[i] == 0) {
data2$numberYep[i] <- 1
}
if (toString(data2$response[i]) == "f" & data2$heightpx[i] == 1) {
data2$heightYep[i] <- 1
}
if (toString(data2$response[i]) == "j" & data2$heightpx[i] == 0) {
data2$heightYep[i] <- 1
}
if (toString(data2$response[i]) == "f" & data2$durationpx[i]) {
data2$durationYep[i] <- 1
}
if (toString(data2$response[i]) == "j" & data2$durationpx[i] == 0) {
data2$durationYep[i] <- 1
}
}
hyps <- c("number", "duration", "height")
ids <- c("subj", "condition", "Comparative")
library(cldl)
BayesAnalysis(data2, hyps, ics)
BayesAnalysis(data2, hyps, ids)
rearrangeSummarize(kdata, ids, hyps)
BayesPlot(data4.long, ids)
bayes_plot
BayesAnalysis
BayesAnalysis(data2, hyps, ids)
install.packages("ggplot2")
data <- read.csv("~/Desktop/lgs2-labeled.csv")
# add Random column
data$randomYep <- data$value
# read hypotheses into R
hyps <- c("strong", "weak", "average", "X1biggest", "X2biggest", "random")
# read id.vars into R
ids <- c("subject", "mixing", "alignment")
#load cldl package
library(cldl)
# run bayes analysis on the data
BayesAnalysis(data, hyps, ids)
bayes_plot
data <- read.csv("~/Desktop/lgs2-labeled.csv")
# add Random column
data$randomYep <- data$value
View(data)
hyps <- c("strong", "weak", "average", "X1biggest", "X2biggest", "random")
ids <- c("subject", "mixing", "alignment")
#load cldl package
library(cldl)
BayesAnalysis(data, hyps, ids)
bayes_plot
multimerge_vertical_csv("~/Desktop/themostData_6-29-16")
multimerge_vertical_csv("~/Desktop/themostData_6-29-16")
View(data)
data <- read.csv("~/Desktop/lgs2-labeled.csv")
data$randomYep <- data$value
hyps <- c("strong", "weak", "average", "X1biggest", "X2biggest", "random")
ids <- c("subject", "mixing", "alignment")
library(cldl)
BayesAnalysis(data, hyps, ids)
data <- read.csv("~/Desktop/lgs2-labeled.csv")
data$randomYep <- data$value
hyps <- c("strong", "weak", "average", "X1biggest", "X2biggest", "random")
ids <- c("subject", "mixing", "alignment")
library(cldl)
BayesAnalysis(data, hyps, ids)
bayes_plot
data <- read.csv("~/Desktop/lgs2-labeled.csv")
data$randomYep <- data$value
hyps <- c("strong", "weak", "average", "X1biggest", "X2biggest", "random")
ids <- c("subject", "mixing", "alignment")
library(cldl)
BayesAnalysis(data, hyps, ids)
bayes_plot
# NOTE: Comments marked with ### change depending on which version of the experiment is run
# for transforming data for plotting
library(reshape2)
# for clustering
library(mclust)
# for filtering
library(dplyr)
# for plotting
library(ggplot2)
library(gridExtra)
# read data in and eliminate leading whitespace in some of the cells
data <- read.csv('~/Desktop/EVENTSdata.csv', header=TRUE, strip.white=TRUE)
# see which test subjects have to be excluded
unique(data$subj)
attach(data)
### exclude s01-s08 for key assignment problem, s13 for matlab crashing on Events 1, exclude s998 and s999 for all (subject numbers for testing)
data2 <- subset(data,!(subj%in%c("s01","s02","s03","s04","s05","s06","s07","s08","s13","s999","s0999","s20")))
data2 <- subset(data2,!(subj%in%c("s999","s998")))
# exclude reaction times <200ms here
data2 <- subset(data2,!(data2$time<200))
# change all of the Number, Height, Duration to factors
data2$A.Number <- as.factor(data2$A.Number)
data2$B.Number <- as.factor(data2$B.Number)
data2$A.Height <- as.factor(data2$A.Height)
data2$B.Height <- as.factor(data2$B.Height)
data2$A.Jump.Duration <- as.factor(data2$A.Jump.Duration)
data2$B.Jump.Duration <- as.factor(data2$B.Jump.Duration)
data2$A.Total.Duration <- as.factor(data2$A.Total.Duration)
data2$B.Total.Duration <- as.factor(data2$B.Total.Duration)
# add columns A.DurationInt and B.DurationInt to represent duration with interjump time
### for Events 1, use following:
data2$A.DurationInt = ifelse(data2$A.Total.Duration==3.55,4,
ifelse(data2$A.Total.Duration==3.85,4,
ifelse(data2$A.Total.Duration==5.7,6,
ifelse(data2$A.Total.Duration==5.85,6,
ifelse(data2$A.Total.Duration==1.7,2,
ifelse(data2$A.Total.Duration==1.55,2,"error"))))))
data2$B.DurationInt = ifelse(data2$B.Total.Duration==3.55,4,
ifelse(data2$B.Total.Duration==3.85,4,
ifelse(data2$B.Total.Duration==5.7,6,
ifelse(data2$B.Total.Duration==5.85,6,
ifelse(data2$B.Total.Duration==1.7,2,
ifelse(data2$B.Total.Duration==1.55,2,"error"))))))
###
#### for Events 1v2 and 2v2, use following instead:
#data2$A.DurationInt = ifelse(data2$A.Total.Duration==3.55,4,
#                            ifelse(data2$A.Total.Duration==3.7,4,
#                                  ifelse(data2$A.Total.Duration==5.55,6,
#                                        ifelse(data2$A.Total.Duration==5.85,6,
#                                              ifelse(data2$A.Total.Duration==7.7,8,
#                                                    ifelse(data2$A.Total.Duration==7.85,8,"error"))))))
#data2$B.DurationInt = ifelse(data2$B.Total.Duration==3.55,4,
#                            ifelse(data2$B.Total.Duration==3.7,4,
#                                  ifelse(data2$B.Total.Duration==5.55,6,
#                                        ifelse(data2$B.Total.Duration==5.85,6,
#                                              ifelse(data2$B.Total.Duration==7.7,8,
#                                                    ifelse(data2$B.Total.Duration==7.85,8,"error"))))))
###
# change DurationInt  to factors
data2$A.DurationInt <- as.factor(data2$A.DurationInt)
data2$B.DurationInt <- as.factor(data2$B.DurationInt)
# add Comparative column (HIGHER, LONGER, MORE, MORE TIMES)
####for events 1 and 1v2, use this:
data2$Comparative <- ifelse(data2$sentence=="Did the star jump HIGHER than the heart?","HIGHER",
ifelse(data2$sentence=="Did the star jump LONGER than the heart?","LONGER",
ifelse(data2$sentence=="Did the star jump MORE than the heart?","MORE",
ifelse(data2$sentence=="Did the star jump MORE TIMES than the heart?","MORETIMES","error"))))
###
###for events 2v2, use this:
#data2$Comparative <- ifelse(data2$sentence=="Did the star move HIGHER than the heart?","HIGHER",
#                           ifelse(data2$sentence=="Did the star move LONGER than the heart?","LONGER",
#                                 ifelse(data2$sentence=="Did the star move MORE than the heart?","MORE",
#                                       ifelse(data2$sentence=="Did the star move MORE TIMES than the heart?","MORETIMES","error"))))
###
#change Comparative to factors
data2$Comparative <- as.factor(data2$Comparative)
#rename "subj" to "subject"
colnames(data2)[colnames(data2)=="subj"] = "subject"
# add columns indicating whether A wins along the relevant dimension
data2$numberpx<- c(rep(0, nrow(data2)))
data2$heightpx <- c(rep(0, nrow(data2)))
data2$durationpx <- c(rep(0, nrow(data2)))
for (i in 1:nrow(data2)) {
if (toString(data2$A.Number[i]) > toString(data2$B.Number[i])) {
data2$numberpx[i] <- 1
}
if (toString(data2$A.Height[i]) > toString(data2$B.Height[i])) {
data2$heightpx[i] <- 1
}
if (toString(data2$A.DurationInt[i]) > toString(data2$B.DurationInt[i])) {
data2$durationpx[i] <- 1
}
}
# add columns indicating whether subject's response was correct by that winner
data2$numberYep <- c(rep(0, nrow(data2)))
data2$heightYep <- c(rep(0, nrow(data2)))
data2$durationYep <- c(rep(0, nrow(data2)))
for (i in 1:nrow(data2)) {
if (toString(data2$response[i]) == "f" & data2$numberpx[i] == 1) {
data2$numberYep[i] <- 1
}
if (toString(data2$response[i]) == "j" & data2$numberpx[i] == 0) {
data2$numberYep[i] <- 1
}
if (toString(data2$response[i]) == "f" & data2$heightpx[i] == 1) {
data2$heightYep[i] <- 1
}
if (toString(data2$response[i]) == "j" & data2$heightpx[i] == 0) {
data2$heightYep[i] <- 1
}
if (toString(data2$response[i]) == "f" & data2$durationpx[i]) {
data2$durationYep[i] <- 1
}
if (toString(data2$response[i]) == "j" & data2$durationpx[i] == 0) {
data2$durationYep[i] <- 1
}
}
# add column "random" for likelihood of null
data2$likelihoodRandom <- (1/2)^30
# Bayes Analysis
ids <- c("subject", "condition", "Comparative", "random")
hyps <- c("height", "duration", "number")
BayesAnalysis(data2, hyps, ids)
library(cldl)
BayesAnalysis(data2, hyps, ids)
data2$likelihoodRandom <- (1/2)^30
ids <- c("subject", "condition", "Comparative", "Random")
hyps <- c("height", "duration", "number")
library(cldl)
BayesAnalysis(data2, hyps, ids)
View(data2)
ids <- c("subject", "condition", "Comparative")
hyps <- c("height", "duration", "number")
library(cldl)
BayesAnalysis(data2, hyps, ids)
bayes_plot
makeNopes_fromYeps(data2, hyps)
allLikelihoods_yepFormat(nopedata, ids, c(hyps,"Random"))
allKValues(ldata, c(hyps, "Random"))
ldata$likelihoodRandom <- (1/2)^30
allKValues(ldata, c(hyps, "Random"))
View(ldata)
rearrangeSummarize(kdata, ids, c(hyps, "Random"))
BayesPlot(data4.long,ids)
bayes_plot
library(lme4)
install.packages("lme4")
data <- read.csv("~/Desktop/gleebest2-data-reshaped.csv")
data <- na.omit(data)
library(lme4)
View(data)
data <- read.csv("~/Desktop/gleebest2-data-reshaped.csv")
data <- na.omit(data)
nrow(data)
View(data)
data <- read.csv("~/Desktop/lgs2n_mturk_completedata.csv")
View(data)
data <- read.csv("~/Desktop/lgs2n_mturk_completedata.csv")
data <- read.csv("~/Desktop/lgs2n_complete")
data <- read.csv("~/Desktop/lgs2n_complete.csv")
setwd("~/git/cldl_repos/theRpackages")
library(devtools)
setwd("Bayes")
document()
cd ../cldl
setwd("../cldl")
document()
setwd("../quantm")
document()
install("cldl")
setwd('..')
install("cldl")
install("bayes")
install("quantm")
